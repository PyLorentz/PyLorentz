"""Functions for GUI styling.

In addition to the layout file, these functions focus on the style
of the elements composing the GUI.

AUTHOR:
Timothy Cote, ANL, Fall 2019.
"""

import os
from typing import Any, Dict, Tuple, Optional


# ============================================================= #
#                          Window Scaling                       #
# ============================================================= #
def get_icon() -> 'bytes':
    """Returns the icon for display in the dock."""

    icon_img = b''
    return icon_img


def pad(left: int, right: int, top: int, bottom: int) -> Tuple[Tuple[int, int], Tuple[int, int]]:
    """Set padding of element.

    Args:
    left: Left padding.
    right: Right padding.
    top: Top padding.
    bottom: Bottom padding.

    Returns
    ----------
    padding: The padding format for PySimpleGUI/Tkinter
    """

    padding = ((left, right), (top, bottom))
    return padding


# ============================================================= #
#                  Window and Element Defaults                  #
# ============================================================= #
class WindowStyle(object):
    """The WindowStyle class sets the styling
    of the window and most elements.

    Attributes:
        DEF_BACKGROUND: The theme background color.
        fonts: The dictionary of font styles.
        DEF_FONT: The default body text font.
        window_height: Window height.
        window_width: Window width.
        tab_size: The tab size.
        small_tab_size: The small tab size."""

    def __init__(self, theme_background_color: str) -> None:
        """Initialize the style of the window."""

        # ---------  Theme & Scaling  --------- #
        self.DEF_BACKGROUND = theme_background_color

        # ---------  self.Fonts and test  --------- #
        self.fonts = {
            'title': ('Times New Roman', '24', 'bold'),
            'bold heading': ('Times New Roman', '18', 'bold'),
            'body': ('Times New Roman', '16'),
            'heading': ('Times New Roman', '18'),
            'tab': ('Times New Roman', '16')}
        self.DEF_FONT = self.fonts['body']
        self.window_width = 1190
        self.window_height = 800
        self.tab_size = (self.window_width, self.window_height - 25)
        self.small_tab_size = (self.window_width, self.window_height - 50)

    # ---------  Individual Element Styling --------- #
    def styles(self, key: str, default_folder: Optional[str] = None) -> Dict:
        """The styles within the GUI.

        Args:
            key: The key for a PySimpleGUI element.
            default_folder: The default folder to browse as defined by defaults.txt.

        Returns:
            key_style: A dictionary of the key-value pairs
                for a specific type of element given
                by 'key'."""

        # Input size
        inp_pad = ((0, 0), (0, 10))
        inp_wid = (5, 1)

        # Fonts
        T_f = self.fonts["title"]
        bH_f = self.fonts["bold heading"]

        python_dir = os.path.dirname(__file__)
        spinner_gif = f'{python_dir}/spinner.gif'
        background_img =  f'{python_dir}/background.gif'
        theme_background = self.DEF_BACKGROUND
        B_f = self.fonts['body']

        def home_style(key: str, val: Dict) -> Dict:
            """The styles within the home tab of the GUI.

                Args:
                    key: The key for a PySimpleGUI element.
                    val: The dictionary of the style with which to update key.

                Returns:
                    key_style: A dictionary of the key-value pairs
                        for a specific type of element given
                        by 'key'."""

            # __________________ Home  ______________ #
            # Browse Button elements
            if key == '__Browser_Browse__':
                val.update(pad=pad(164, 0, 10, 0), target='__Browser_Path__')
            # Button elements
            elif key == '__Browser_Set__':
                val.update(pad=pad(10, 0, 10, 0))
            elif key == '__Browser_Reset__':
                val.update(pad=pad(10, 0, 10, 0))
            # Input elements
            elif key == '__Browser_Path__':
                val.update(pad=pad(16, 0, 10, 0), size=(30, 1))
            # Text elements
            elif key == 'home_title':
                val.update(pad=pad(226, 0, 70, 5), font=T_f)
            elif key == 'home_version':
                val.update(pad=((326, 0), (0, 0)), font=bH_f)
            elif key == 'home_authors':
                val.update(pad=((219, 0), (0, 0)))
            elif key == 'home_readme':
                val.update(pad=((215, 0), (5, 5)), size=(42, 16),
                           font=B_f, background_color='#e4eaf5')
            elif key == 'home_contact':
                val.update(pad=pad(235, 0, 20, 40))
            return val

        def REC_style(key, val) -> Dict:
            """The styles within the reconstruction tab of the GUI.

            Args:
                key: The key for a PySimpleGUI element.
                val: The dictionary of the style with which to update key.

            Returns:
                key_style: A dictionary of the key-value pairs
                    for a specific type of element given
                    by 'key'."""

            # Invisible
            if key == '__REC_Stack_Stage__':
                val.update(visible=False, enable_events=True)
            if key == '__REC_FLS1_Staging__':
                val.update(visible=False, enable_events=True)
            if key == '__REC_FLS2_Staging__':
                val.update(visible=False, enable_events=True)
            # Browse Buttons
            elif key == '__REC_Load_Stack__':
                val.update(target='__REC_Stack_Stage__',
                           pad=((5, 0), (5, 0)), disabled=True)
            elif key == '__REC_Load_FLS1__':
                val.update(target='__REC_FLS1_Staging__', pad=((10, 0), (5, 0)),
                           disabled=True)
            elif key == '__REC_Load_FLS2__':
                val.update(target='__REC_FLS2_Staging__', pad=((10, 0), (5, 0)),
                           disabled=True)
            elif key == '__REC_Image_Dir_Browse__':
                val.update(target='__REC_Image_Dir_Path__',
                           pad=((5, 0), (7, 0)), initial_folder=default_folder)
            # Button Element
            elif key == '__REC_Set_FLS__':
                val.update(pad=((130, 0), (2, 5)), disabled=True,
                           metadata={'State': 'Def'})
            elif key == '__REC_Reset_FLS__':
                val.update(pad=((5, 0), (2, 5)), disabled=True)
            elif key == '__REC_Mask__':
                val.update(pad=((50, 0), (4, 4)), disabled=True,
                           metadata={'Set': 'Confirm Region', 'Def': 'Select Region',
                                     'State': 'Def'})
            elif key == '__REC_Erase_Mask__':
                val.update(disabled=True, pad=((10, 0), (4, 4)))
            elif key == '__REC_Run_TIE__':
                val.update(enable_events=True, disabled=True, pad=((12, 0), (10, 0)))
            elif key == '__REC_Save_TIE__':
                val.update(enable_events=True, disabled=True, pad=((10, 0), (8, 0)))
            elif key == '__REC_Set_Img_Dir__':
                val.update(pad=((3, 0), (7, 0)), metadata={'State': 'Def'})
            elif key == '__REC_Reset_Img_Dir__':
                val.update(pad=((3, 0), (7, 0)))
            # Combobox Element
            elif key == '__REC_FLS_Combo__':
                val.update(enable_events=True, default_value='Two', size=(5, 1),
                           readonly=True, disabled=True, pad=((3, 0), (10, 0)),
                           metadata={'Set': 'Two', 'Def': 'Two', 'State': 'Def'})
            elif key == '__REC_TFS_Combo__':
                val.update(enable_events=True, default_value='Unflip/Flip', size=(12, 1),
                           readonly=True, disabled=True, pad=((0, 0), (10, 0)),
                           metadata={'Set': 'Unflip/Flip', 'Def': 'Unflip/Flip',
                                     'State': 'Def'})
            elif key == '__REC_Def_Combo__':
                val.update(size=(12, 1), disabled=True,
                           default_value='None', pad=((8, 0), (8, 0)))
            elif key == '__REC_Derivative__':
                val.update(size=(16, 1), disabled=True,
                           default_value='Central Diff.', pad=((8, 0), (5, 0)))
            elif key == '__REC_Colorwheel__':
                val.update(size=(6, 1), disabled=True,
                           default_value='HSV', pad=((8, 0), (7, 0)))
            elif key == '__REC_Arrow_Color__':
                val.update(size=(3, 1), disabled=True,
                           default_value='On', pad=((0, 0), (7, 0))),
            # Checkbox Element
            elif key == '__REC_Symmetrize__':
                val.update(default=False, pad=((0, 0), (7, 0)))

            # Graph
            elif key == '__REC_Graph__':
                val.update(background_color='#808080', pad=pad(0, 0, 4, 0),
                           enable_events=True, drag_submits=True,
                           metadata={'size': (672, 672)})
            elif key == '__REC_Colorwheel_Graph__':
                val.update(background_color=theme_background,
                           pad=pad(5, 0, 4, 0), enable_events=True)

            # Image elements
            elif key == '__REC_FLS_Spinner__':
                val.update(filename=background_img, background_color=theme_background, pad=((5, 124), (0, 0)), size=(30, 30),
                           metadata={'Set': spinner_gif, 'Def': background_img,
                                     'State': 'Def'})
            elif key == '__REC_PYTIE_Spinner__':
                val.update(filename=background_img, background_color=theme_background, pad=((5, 5), (27, 0)),
                           metadata={'Set': spinner_gif, 'Def': background_img,
                                     'State': 'Def'})
            # Input field element
            elif key == '__REC_Stack__':
                val.update(size=(24, 1), use_readonly_for_disable=True,
                           disabled=True, pad=((0, 0), (5, 0)),
                           disabled_readonly_background_color='#A7A7A7',
                           metadata={'Set': 'None', 'Def': 'None',
                                     'State': 'Def'})
            elif key == '__REC_FLS1__':
                val.update(enable_events=True, use_readonly_for_disable=True,
                           disabled=True, size=(24, 1), pad=((10, 0), (5, 0)),
                           disabled_readonly_background_color='#A7A7A7',
                           metadata={'Set': 'None', 'Def': 'None', 'State': 'Def'})
            elif key == '__REC_FLS2__':
                val.update(enable_events=True, use_readonly_for_disable=True,
                           disabled=True, size=(24, 1), pad=((10, 0), (5, 0)),
                           disabled_readonly_background_color='#A7A7A7',
                           metadata={'Set': 'None', 'Def': 'None', 'State': 'Def'})
            elif key == '__REC_M_Volt__':
                val.update(size=(4, 1), enable_events=True, pad=((25, 0), (10, 0)),
                           font="Times 36", justification='right',
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7')
            elif key == '__REC_transform_rot__':
                val.update(pad=(5, 5), size=(4, 1), disabled=True,
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7')
            elif key == '__REC_transform_x__':
                val.update(pad=(5, 5), size=(4, 1), disabled=True,
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7')
            elif key == '__REC_transform_y__':
                val.update(pad=(5, 5), size=(4, 1), disabled=True,
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7')
            elif key == '__REC_Mask_Size__':
                val.update(disabled=True, enable_events=True,
                           pad=((30, 0), (0, 0)), size=(4, 1),
                           justification='right',
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7')
            elif key == '__REC_QC_Input__':
                val.update(pad=((8, 0), (7, 0)), disabled=True,
                           size=(6, 1), justification='right',
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7')
            elif key == '__REC_Arrow_Num__':
                val.update(justification='right', disabled=True,
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7',
                           size=(3, 1), pad=((0, 0), (7, 0)))
            elif key == '__REC_Arrow_Len__':
                val.update(justification='right', disabled=True,
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7',
                           size=(3, 1), pad=((0, 0), (7, 0)))
            elif key == '__REC_Arrow_Wid__':
                val.update(justification='right', disabled=True,
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7',
                           size=(3, 1), pad=((0, 0), (7, 0)))
            elif key == '__REC_Image_Dir_Path__':
                val.update(size=(35, 1), pad=((2, 0), (7, 0)),
                           use_readonly_for_disable=True,
                           disabled_readonly_background_color='#A7A7A7')
            elif key == '__REC_Image__':
                val.update(background_color=theme_background, enable_events=True,
                           justification='center',
                           pad=((38, 0), (5, 0)), font='Times 20', size=(67, 1),
                           metadata={'Set': 'None', 'Def': 'None',
                                     'State': 'Def'})
            # Listbox element
            elif key == '__REC_Image_List__':
                val.update(default_values='Stack', select_mode='LISTBOX_SELECT_MODE_SINGLE',
                           size=(16, 5), no_scrollbar=True, disabled=True,
                           enable_events=True, pad=((9, 0), (7, 7)))
            elif key == '__REC_Def_List__':
                val.update(select_mode=None, size=(16, 3),
                           no_scrollbar=True, pad=((19, 0), (7, 7)),
                           metadata={'length': 1})
            # Radio element
            elif key == '__REC_Square_Region__':
                val.update(default=True, disabled=True, enable_events=True)
            elif key == '__REC_Rectangle_Region__':
                val.update(disabled=True, enable_events=True)
            # Slider element
            elif key == '__REC_Slider__':
                val.update(size=(40, 20), disable_number_display=True, pad=((10, 8), (80, 0)),
                           disabled=True, enable_events=True, orientation='vertical',
                           default_value=0, metadata={'slider_range': (0, 0)})
            elif key == '__REC_Image_Slider__':
                val.update(range=(0, 7), disable_number_display=True,
                           pad=((0, 0), (1, 0)), size=(7, 16),
                           enable_events=True, orientation='vertical',
                           default_value=7, metadata={'slider_range': (0, 7)})
            elif key == '__REC_Defocus_Slider__':
                val.update(range=(0, 0), disable_number_display=True,
                           pad=((0, 0), (1, 0)), size=(4, 16),
                           enable_events=True, orientation='vertical',
                           default_value=0, metadata={'slider_range': (0, 0)})
            # Text element
            elif key == '__REC_FLS1_Text__':
                val.update(pad=((5, 0), (5, 0)),
                           metadata={'Both': 'Both FLS', 'Single': '1 FLS',
                                     'Two': "Unflip FLS"})
            elif key == '__REC_FLS2_Text__':
                val.update(pad=((5, 0), (5, 0)),
                           metadata={'Both': '', 'Single': '',
                                     'Two': "Flip FLS"})
            return val

        # Check if key a part of tab
        # For correct key, return its style
        key_style = dict(key=key)
        if key.startswith("home"):
            key_style = home_style(key, key_style)
        elif key.startswith("__REC"):
            key_style = REC_style(key, key_style)
        return key_style
